// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  firstName    String?
  lastName     String?
  password     String   // bcrypt hash
  isSuperadmin Boolean  @default(false)
  pageAccess   Json     // { slug: boolean }
  project      String?  // project_id (optional)
  projectName  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Project {
  id           String   @id @default(cuid())
  title        String
  status       String?
  notes        String?
  latestStatus String?  // Latest Status field
  category     String?  // Category field: Client Advisory, Ally Advisory, Founder Venture, Partner Venture
  logoUrl      String?  // URL to uploaded logo file
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Task {
  id          String   @id @default(cuid())
  title       String
  description String?
  status      String?  // todo, doing, done
  priority    String?  // low, medium, high
  assignee    String?  // user_id or name
  project     String?  // project_id
  projectName String?
  dueDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Collection {
  id        String   @id @default(cuid())
  slug      String   @unique      // e.g. "tasks"
  label     String               // e.g. "Tasks"
  schema    Json                 // JSON schema for fields (UI uses this)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  items     Item[]
}

model Item {
  id           String     @id @default(cuid())
  collectionId String
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  data         Json       // the actual record, shape defined by Collection.schema
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@index([collectionId])
}

model Page {
  id        String   @id @default(cuid())
  slug      String   @unique
  label     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FileUpload {
  id           String   @id @default(cuid())
  filename     String
  originalName String
  mimeType     String?
  size         Int?
  uploadedBy   String?  // user_id
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}